/* optimal_paging.c
   Simulate optimal page replacement (Belady's algorithm). */
#include <stdio.h>
#include <limits.h>

int findFarthest(int ref[], int n, int idx, int frames[], int fcount){
    int far = -1, farDist = -1;
    for(int i=0;i<fcount;i++){
        int page = frames[i], j;
        for(j=idx+1;j<n;j++) if(ref[j]==page) break;
        if(j==n) return i; // not used again: best to replace
        if(j - (idx+1) > farDist) { farDist = j-(idx+1); far = i; }
    }
    if(far==-1) return 0;
    return far;
}

int main(){
    int n, framesCount;
    printf("Number of pages in reference string: ");
    scanf("%d",&n);
    int ref[n];
    printf("Enter reference string:\n");
    for(int i=0;i<n;i++) scanf("%d",&ref[i]);
    printf("Number of frames: ");
    scanf("%d",&framesCount);

    int frames[framesCount];
    for(int i=0;i<framesCount;i++) frames[i]=-1;
    int faults=0;

    printf("\nStep-by-step:\n");
    for(int i=0;i<n;i++){
        int page=ref[i], found=0;
        for(int j=0;j<framesCount;j++) if(frames[j]==page){ found=1; break; }
        if(!found){
            int empty=-1;
            for(int j=0;j<framesCount;j++) if(frames[j]==-1){ empty=j; break; }
            if(empty!=-1) frames[empty]=page;
            else{
                int rep = findFarthest(ref,n,i,frames,framesCount);
                frames[rep]=page;
            }
            faults++;
            printf("Ref %2d : (fault)  ", page);
        } else {
            printf("Ref %2d : (hit)    ", page);
        }
        for(int j=0;j<framesCount;j++){
            if(frames[j]==-1) printf(" - ");
            else printf("%2d ", frames[j]);
        }
        printf("\n");
    }
    printf("\nTotal Page Faults = %d\n", faults);
    return 0;
}
